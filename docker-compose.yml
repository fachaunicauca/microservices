services:
  ### Keycloak conectado a PostgreSQL en AWS RDS
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.2.0
    command: [ "start-dev" ]
    ports:
      - "8181:8181"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${KEYCLOAK_DB_HOST}:${KEYCLOAK_DB_PORT}/${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_PORT: 8181
      KC_HOSTNAME: keycloak.local
    networks:
      - microservices-network
    volumes:
      - keycloak_data:/opt/keycloak/data

  ### Servicio de descubrimiento Eureka
  discovery-service:
    build:
      context: .
      dockerfile: discovery-service/Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    environment:
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "9090:9090"
    depends_on:
      - keycloak
    environment:
      KC_CLIENT_SECRET: ${KC_CLIENT_SECRET}
    networks:
      - microservices-network
    extra_hosts:
      - "keycloak:host-gateway"

  ### API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
      - keycloak
    networks:
      - microservices-network
    extra_hosts:
      - "keycloak:host-gateway"
    environment:
      EUREKA_USERNAME: ${EUREKA_USERNAME}
      EUREKA_PASSWORD: ${EUREKA_PASSWORD}
      KC_CLIENT_SECRET: ${KC_CLIENT_SECRET}
      SPRING_PROFILES_ACTIVE: docker

  ### Inventory Service
  inventory-service:
    container_name: inventory-service
    build:
      context: .
      dockerfile: inventory-service/Dockerfile
    ports:
      - "0:8081"
    depends_on:
      - discovery-service
      - api-gateway
    environment:
      INVENTORY_DATASOURCE_URL: ${INVENTORY_DATASOURCE_URL}
      INVENTORY_DATASOURCE_USERNAME: ${INVENTORY_DATASOURCE_USERNAME}
      INVENTORY_DATASOURCE_PASSWORD: ${INVENTORY_DATASOURCE_PASSWORD}
      EUREKA_USERNAME: ${EUREKA_USERNAME}
      EUREKA_PASSWORD: ${EUREKA_PASSWORD}
      SPRING_PROFILES_ACTIVE: docker
      CLOUDINARY_URL: ${CLOUDINARY_URL}
    networks:
      - microservices-network

  ### Educator Service
  educator-service:
    container_name: educator-service
    build:
      context: .
      dockerfile: educator-service/Dockerfile
    ports:
      - "0:8082"
    depends_on:
      - discovery-service
      - api-gateway
    environment:
      EDUCATOR_DATASOURCE_URL: ${EDUCATOR_DATASOURCE_URL}
      EDUCATOR_DATASOURCE_USERNAME: ${EDUCATOR_DATASOURCE_USERNAME}
      EDUCATOR_DATASOURCE_PASSWORD: ${EDUCATOR_DATASOURCE_PASSWORD}
      EUREKA_USERNAME: ${EUREKA_USERNAME}
      EUREKA_PASSWORD: ${EUREKA_PASSWORD}
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservices-network

  ### Test Service
  test-service:
    container_name: test-service
    build:
      context: .
      dockerfile: test-service/Dockerfile
    ports:
      - "0:8083"
    depends_on:
      - discovery-service
      - api-gateway
    environment:
      TEST_DATASOURCE_URL: ${TEST_DATASOURCE_URL}
      TEST_DATASOURCE_USERNAME: ${TEST_DATASOURCE_USERNAME}
      TEST_DATASOURCE_PASSWORD: ${TEST_DATASOURCE_PASSWORD}
      EUREKA_USERNAME: ${EUREKA_USERNAME}
      EUREKA_PASSWORD: ${EUREKA_PASSWORD}
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservices-network
networks:
  microservices-network:
    driver: bridge

volumes:
  keycloak_data:
